/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mobilebank;

import static java.lang.Thread.sleep;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;

/**
 *
 * @author Dron
 */
public class mainFrame extends javax.swing.JFrame {

    public String session = null;
    public String name    = null;
    public Json JsonApi = null;
    DefaultTableModel mod;
    DefaultTableModel modAccountsTable;
    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        exchangeRatePanel = new javax.swing.JPanel();
        exchangeRateScrollPane = new javax.swing.JScrollPane();
        exchangeRateTable = new javax.swing.JTable();
        getExchangeRateButton = new javax.swing.JButton();
        exchangeErrorText = new javax.swing.JLabel();
        accountsInfo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AccountsTable = new javax.swing.JTable();
        getBalanceButton = new javax.swing.JButton();
        onlyBranch = new javax.swing.JCheckBox();
        branchName = new javax.swing.JTextField();
        getRateButton = new javax.swing.JButton();
        exchangeMoneyButton = new javax.swing.JButton();
        userExchangeRate = new javax.swing.JTextField();
        exchangeResult = new javax.swing.JLabel();
        sumToExchange = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Мобильный банк");

        jInternalFrame1.setVisible(true);

        Vector<String> headerVect = new Vector<String>();
        headerVect.add("Валюта покупаемая");
        headerVect.add("Филиал");
        headerVect.add("Стоимость");

        mod = new DefaultTableModel(headerVect, 0);
        exchangeRateTable.setModel(mod);
        exchangeRateScrollPane.setViewportView(exchangeRateTable);

        getExchangeRateButton.setText("Запрос с сервера");
        getExchangeRateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getExchangeRateButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout exchangeRatePanelLayout = new javax.swing.GroupLayout(exchangeRatePanel);
        exchangeRatePanel.setLayout(exchangeRatePanelLayout);
        exchangeRatePanelLayout.setHorizontalGroup(
            exchangeRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exchangeRatePanelLayout.createSequentialGroup()
                .addComponent(exchangeRateScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 72, Short.MAX_VALUE))
            .addGroup(exchangeRatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(getExchangeRateButton)
                .addGap(18, 18, 18)
                .addComponent(exchangeErrorText, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        exchangeRatePanelLayout.setVerticalGroup(
            exchangeRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exchangeRatePanelLayout.createSequentialGroup()
                .addComponent(exchangeRateScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(exchangeRatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(getExchangeRateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exchangeErrorText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 120, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Курс валют", exchangeRatePanel);

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        Vector<String> headerVectAccountsTable = new Vector<String>();
        headerVectAccountsTable.add("№ счета");
        headerVectAccountsTable.add("Филиал");
        headerVectAccountsTable.add("Валюта");
        headerVectAccountsTable.add("Баланс");

        modAccountsTable = new DefaultTableModel(headerVectAccountsTable, 0);
        AccountsTable.setModel(modAccountsTable);
        jScrollPane1.setViewportView(AccountsTable);

        getBalanceButton.setText("Запрос баланса счетов");
        getBalanceButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getBalanceButtonMouseClicked(evt);
            }
        });

        onlyBranch.setText("показать только счета из филиала");
        onlyBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlyBranchActionPerformed(evt);
            }
        });

        branchName.setText("Филиал");

        getRateButton.setText("Запрос курса конвертации");
        getRateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getRateButtonMouseClicked(evt);
            }
        });

        exchangeMoneyButton.setText("Запрос обмена");
        exchangeMoneyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exchangeMoneyButtonActionPerformed(evt);
            }
        });

        userExchangeRate.setText("Или предложите свой");
        userExchangeRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userExchangeRateActionPerformed(evt);
            }
        });

        sumToExchange.setText("Сумма обмена");

        javax.swing.GroupLayout accountsInfoLayout = new javax.swing.GroupLayout(accountsInfo);
        accountsInfo.setLayout(accountsInfoLayout);
        accountsInfoLayout.setHorizontalGroup(
            accountsInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
            .addGroup(accountsInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(accountsInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountsInfoLayout.createSequentialGroup()
                        .addComponent(getBalanceButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(onlyBranch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(branchName, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(accountsInfoLayout.createSequentialGroup()
                        .addGroup(accountsInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(accountsInfoLayout.createSequentialGroup()
                                .addComponent(getRateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userExchangeRate, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(accountsInfoLayout.createSequentialGroup()
                                .addComponent(exchangeMoneyButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exchangeResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sumToExchange, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        accountsInfoLayout.setVerticalGroup(
            accountsInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accountsInfoLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(accountsInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getBalanceButton)
                    .addComponent(branchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(onlyBranch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountsInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getRateButton)
                    .addComponent(userExchangeRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sumToExchange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountsInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exchangeMoneyButton)
                    .addComponent(exchangeResult, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        jTabbedPane1.addTab("Счета", accountsInfo);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Контакты", jPanel1);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        JSONObject jObject = null;
        try {
            jObject = JsonApi.getJson("/getBalances?session=" + session);
        } catch (ParseException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

            if(jObject.get("error").equals("false"))
            {

                
            }
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void onlyBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlyBranchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_onlyBranchActionPerformed

    private void getExchangeRateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getExchangeRateButtonMouseClicked
        JSONObject jObject = null;
        
        try {
            jObject = JsonApi.getJson("/getIndicativeRatesByTwoCurrencies?session=" + session + "&currency1=USD&currency2=RUR&currency1_2=EUR&currency2_2=RUR");
        } catch (ParseException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(jObject.get("error").equals("false"))
        {
            for (int i = exchangeRateTable.getRowCount() - 1; i >= 0 ; i--) 
            {
                mod.removeRow(i);
            }
            JSONArray resList = (JSONArray) jObject.get("result");
            for (int i = 0; i < resList.size(); i++) 
            {
                JSONObject temp = (JSONObject) resList.get(i);
                Vector<String> newRow = new Vector<String>();
                newRow.add(temp.get("currency1").toString());
                newRow.add(temp.get("branchid").toString());
                newRow.add(temp.get("indicativerate").toString() + " " + temp.get("currency2").toString());
                mod.addRow(newRow);
            }
        }
        else
        {
            exchangeErrorText.setText("Запрос не выполнен." + jObject.get("message"));
        }
    }//GEN-LAST:event_getExchangeRateButtonMouseClicked

    private void getBalanceButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getBalanceButtonMouseClicked
        JSONObject jObject = null;
        JSONObject sum = null;
        
        try {
            jObject = JsonApi.getJson("/getBalances?session=" + session);
            sleep(1);
            if(onlyBranch.isSelected() == false)
            {
                sum = JsonApi.getJson("/getBalanceSumInAllBranches?session=" + session + "currency=USD");
            }
            else
            {
                sum = JsonApi.getJson("/getBalanceSumInBranch?session=" + session + "$branchid=" + branchName.getText() + "$currency=USD");
            }
        } catch (ParseException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(jObject.get("error").equals("false"))
        {
            while(AccountsTable.getRowCount() > 0)
            {
                modAccountsTable.removeRow(AccountsTable.getRowCount() - 1);
            }
            JSONArray resList = (JSONArray) jObject.get("result");
            for (int i = 0; i < resList.size(); i++) 
            {
                JSONObject temp = (JSONObject) resList.get(i);
                if(onlyBranch.isSelected() == false || branchName.getText().equals(temp.get("branchid").toString()))
                {
                    Vector<String> newRow = new Vector<String>();
                    newRow.add(temp.get("accountid").toString());
                    newRow.add(temp.get("branchid").toString());
                    newRow.add(temp.get("currency").toString());
                    newRow.add(temp.get("amount").toString());
                    modAccountsTable.addRow(newRow);
                }
            }
            Vector<String> newRow = new Vector<String>();
            newRow.add("Итого:");
            newRow.add("");
            newRow.add("USD");
            //newRow.add(sum.get("result").toString());
            modAccountsTable.addRow(newRow);
        }
        else
        {
            exchangeErrorText.setText("Запрос не выполнен." + jObject.get("message"));
        }
    }//GEN-LAST:event_getBalanceButtonMouseClicked

    private void userExchangeRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userExchangeRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userExchangeRateActionPerformed

    private void getRateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getRateButtonMouseClicked
        JSONObject jObject = null;
        
        try {
            jObject = JsonApi.getJson("/getRealExchangeRate?session=" + session + "&amount=" + sumToExchange.getText() + "&rateid=1");
        } catch (ParseException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(jObject.get("error").equals("false"))
        {
            JSONArray resList = (JSONArray) jObject.get("result");
            JSONObject temp = (JSONObject) resList.get(0);
            userExchangeRate.setText(temp.get("realindicativerate").toString());
        }
        else
        {
            exchangeErrorText.setText("Запрос не выполнен." + jObject.get("message"));
        }
    }//GEN-LAST:event_getRateButtonMouseClicked

    private void exchangeMoneyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exchangeMoneyButtonActionPerformed
        exchangeResult.setText("запрос принят");
    }//GEN-LAST:event_exchangeMoneyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AccountsTable;
    private javax.swing.JPanel accountsInfo;
    private javax.swing.JTextField branchName;
    private javax.swing.JLabel exchangeErrorText;
    private javax.swing.JButton exchangeMoneyButton;
    private javax.swing.JPanel exchangeRatePanel;
    private javax.swing.JScrollPane exchangeRateScrollPane;
    private javax.swing.JTable exchangeRateTable;
    private javax.swing.JLabel exchangeResult;
    private javax.swing.JButton getBalanceButton;
    private javax.swing.JButton getExchangeRateButton;
    private javax.swing.JButton getRateButton;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox onlyBranch;
    private javax.swing.JTextField sumToExchange;
    private javax.swing.JTextField userExchangeRate;
    // End of variables declaration//GEN-END:variables
}
